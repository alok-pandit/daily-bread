// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: counter.sql

package gen

import (
	"context"
)

const getCounter = `-- name: GetCounter :one
SELECT
  count
from
  counter
WHERE
  id = 1 FOR
UPDATE
`

// counter.sql
func (q *Queries) GetCounter(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getCounter)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const incrementCounter = `-- name: IncrementCounter :exec
UPDATE
  counter
SET
  count = (
    SELECT
      count
    FROM
      counter
    WHERE
      id = 1
  ) + 1
WHERE
  id = 1
`

func (q *Queries) IncrementCounter(ctx context.Context) error {
	_, err := q.db.Exec(ctx, incrementCounter)
	return err
}

const incrementCounterForUpdate = `-- name: IncrementCounterForUpdate :exec
UPDATE
  counter
SET
  count = (
    SELECT
      count
    FROM
      counter
    WHERE
      id = 1 FOR
    UPDATE
  ) + 1
WHERE
  id = 1
`

func (q *Queries) IncrementCounterForUpdate(ctx context.Context) error {
	_, err := q.db.Exec(ctx, incrementCounterForUpdate)
	return err
}
