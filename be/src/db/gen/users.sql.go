// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package gen

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users (id, fullname, username, PASSWORD)
VALUES
  ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID       string `db:"id" json:"id"`
	Fullname string `db:"fullname" json:"fullname"`
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Fullname,
		arg.Username,
		arg.Password,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
  users
WHERE
  id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  password
FROM
  users
WHERE
  username = $1
`

type GetUserRow struct {
	ID       string `db:"id" json:"id"`
	Password string `db:"password" json:"password"`
}

// users.sql
func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  username,
  fullname,
  password
FROM
  users
WHERE
  id = $1
`

type GetUserByIDRow struct {
	Username string `db:"username" json:"username"`
	Fullname string `db:"fullname" json:"fullname"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.Username, &i.Fullname, &i.Password)
	return i, err
}

const listUers = `-- name: ListUers :many
SELECT
  id, fullname, username, password
FROM
  users
ORDER BY
  fullname
`

func (q *Queries) ListUers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
