// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProductByID = `-- name: GetProductByID :one
SELECT
  id, name, description, price, images, quantity
FROM
  product
WHERE
  id = $1
`

// products.sql
func (q *Queries) GetProductByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Images,
		&i.Quantity,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
WITH
  SelectedProducts AS (
    SELECT
      id, name, description, price, images, quantity
    FROM
      product
    WHERE
      id < $1
    ORDER BY
      id DESC
    LIMIT
      $2
  )
SELECT
  id, name, description, price, images, quantity,
  LAST(id) OVER () AS last_cursor
FROM
  SelectedProducts
`

type ListProductsParams struct {
	ID    string `db:"id" json:"id"`
	Limit int32  `db:"limit" json:"limit"`
}

type ListProductsRow struct {
	ID          string         `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Description pgtype.Text    `db:"description" json:"description"`
	Price       pgtype.Numeric `db:"price" json:"price"`
	Images      []string       `db:"images" json:"images"`
	Quantity    pgtype.Int4    `db:"quantity" json:"quantity"`
	LastCursor  interface{}    `db:"last_cursor" json:"lastCursor"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Images,
			&i.Quantity,
			&i.LastCursor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
