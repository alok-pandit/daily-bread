services:
  cache:
    image: "public.ecr.aws/readyset/readyset:beta-latest"
    network_mode: "host"
    platform: linux/amd64
    expose:
      - 6033 # ReadySet Server Prometheus metrics at http://readyset:6033/metrics
      - 6034 # ReadySet Adapter Prometheus metrics at http://readyset:6034/metrics
      # ports:
      # The ReadySet Adapter listen port, i.e. what your application / SQL shell connects to
      # - "5433:5433"
    environment:
      DEPLOYMENT_ENV: quickstart_docker
      DB_DIR: /state
      PROMETHEUS_METRICS: true
      QUERY_CACHING: explicit
      QUERY_LOG: true
      QUERY_LOG_AD_HOC: true
      STANDALONE: true
      DEPLOYMENT: docker_compose_deployment
      LISTEN_ADDRESS: 0.0.0.0:5433
      UPSTREAM_DB_URL: postgresql://postgres:postgres@localhost:5432/db?sslmode=disable
      CONTROLLER_ADDRESS: 0.0.0.0
    volumes:
      - "readyset:/state"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "--fail", "127.0.0.1:6033/health"]
      interval: 2s
      timeout: 1s
      retries: 5
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
  prometheus:
    image: "public.ecr.aws/readyset/readyset-prometheus:latest"
    network_mode: "host"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 12
    expose:
      - 9090
    volumes:
      - "prometheus:/prometheus"
  pushgateway:
    image: prom/pushgateway
    expose:
      - 9091
  grafana:
    image: "public.ecr.aws/readyset/readyset-grafana:latest"
    network_mode: "host"
    # ports:
    # - 4000:4000
    environment:
      UPSTREAM_DB_URL: postgresql://postgres:postgres@localhost:5432/db?sslmode=disable
      RS_PORT: 5433
      RS_GRAFANA_PORT: 4000
  postgres:
    image: postgres:16
    network_mode: "host"
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: db
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 12

  db-scylla:
    image: scylladb/scylla
    network_mode: "host"
    container_name: db-scylla
    volumes:
      - type: volume
        source: target
        target: /var/lib/scylla
        volume:
          nocopy: true

  db-scylla2:
    image: scylladb/scylla
    container_name: db-scylla2
    network_mode: "host"
    command: --seeds=db-scylla
    volumes:
      - type: volume
        source: target
        target: /var/lib/scylla
        volume:
          nocopy: true

  db-scylla3:
    image: scylladb/scylla
    container_name: db-scylla3
    network_mode: "host"
    command: --seeds=db-scylla
    volumes:
      - type: volume
        source: target
        target: /var/lib/scylla
        volume:
          nocopy: true

volumes:
  postgres-data: ~
  target: ~
  prometheus: ~
  readyset: ~
